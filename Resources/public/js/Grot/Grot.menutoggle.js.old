/**

 * @module Grot/menutoggle
 * @version 1.0
 * @param {Object} Grot namespace
 * @param {undefined} undefined
 * 
 */
(function(Grot, undefined) {

    /**
     * @description Rodea las limitaciones de bootstrap list-group para menus de varias columnas
     * @name Grot.menutoggle
     * @public
     * @function
     * @param {string} [method]
     * @return {*}
     */
    Grot.prototype.menutoggle = function(method) {
            if ( methods[method] ) {
                return methods[ method ].apply(this , Array.prototype.slice.call( arguments, 1 ));
            }else if ( typeof method === 'object' || Array.isArray(method) || ! method ) {
                return methods.init.apply( this, arguments );
            }else{
                console.log( 'Method ' +  method + ' inexistente en Grot.menutoggle' );
            }
        };

    let menu, targetContainer, settings= {
        appendHash: true,
        menuItemsSelector: 'a'
    };

    /**
     * @name methods
     * @private
     * @type {Object} methods
     */
    let methods=
    {
        /**
         * Default method
         * @private
         * @returns Grot
         */
        init: function (options) {
            menu = this._selector,
            targetContainer = document.getElementById(menu.dataset.container);
        },
        /**
         * Get menu nodeList
         * return self
         */
        getMenuNodeList: function()
        {
            return this.menu.querySelectorAll(this.menuItemsSelector);
        },
        /**
         * Load hash || active || first item
         * return self
         */
        loadHashOrDefault: function()
        {
            let menuItem = this.menu.querySelector(settings.menuItemsSelector+'[href="'+window.location.hash+'"]') ||
                this.menu.querySelector(settings.menuItemsSelector+'.active') ||
                this.menu.querySelector(settings.menuItemsSelector);
            menuItem.click();
            return this;
        },
        /**
         * Show data
         * @param {Object} dataTarget data div container
         */
        showContainerDiv: function(dataTarget)
        {
            for (let i = 0; i < targetContainer.children.length; i++) {
                let e = targetContainer.children[i];
                e.style.display = 'none';
            }
            dataTarget.style.display= 'inline';
        },
        /**
         * Load/reload div
         * @param {Object} menuItem MenÃº link
         * @param {boolean} [reload] reload content
         */
        load: function(menuItem, reload)
        {
            let dataTarget  = document.querySelector(menuItem.hash),
                is_loaded= menuItem.dataset.loaded || false;

            if(typeof dataTarget === "undefined")
            {
                console.log('Target hash ID desconocido: '+ menuItem.hash);
                return this;
            }

            // Update history
            //window.history.pushState(null, null, menuItem.href);

            menu.querySelector('.active').classList.remove('active')
            menuItem.classList.add('active');
            if(!is_loaded) menuItem.dataset.loaded='true';
            methods.showContainerDiv(dataTarget);
        }

    };
}( window.Grot = window.Grot || {}));