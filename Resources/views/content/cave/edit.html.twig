{#
/**
 * Edit Cave
 * @file edit.html.twig
 * @param array arrayParams
 * @param FormView form
 * @param FormView delete_form
 * @param Cave cave
 */
#}
{% extends '@GptCavebackend/base.html.twig' %}
{% block content %}
    {#
    - Cada elemento (menuitem) hace relaci√≥n a un div (menucontent).
    - Un div contiene un formulario o un conjunto de div paginables con relaciones manytoone
    - Un formulario puede ser una separata de Cave entity u otra entidad relacionada onetoone con Cave
    - Los divs paginables utilizan ventana modal para los formularios.
    #}
    {%include '@GptCavebackend/content/cave/navbar.html.twig'%}

    {%include '@GptCavebackend/content/cave/edit/forms_navbar_menu.html.twig'%}

    <div  id="menuContent">
        {%include '@GptCavebackend/content/cave/edit/menucontent.html.twig'%}
    </div><!--End #menuContent -->
    {% include '@GptCavebackend/partial/form/modal.html.twig' %}
{% endblock %}

{% block footer_javascripts %}
    {%include '@GptCavebackend/content/cave/script/scripts.html.twig'%}
    <script type="text/javascript" src="{{asset(arrayParams.bundle.webasset.js~'Grot/MenuToggle.js')}}"></script>
    <script>
        let CaveMenuToggle= new MenuToggle('menuItems');
        CaveMenuToggle.setMenuItemQuerySelector('a.list-group-item-action').
        on('click', function (menuItem, dataTarget)
        {
            console.log(this)
            if(menuItem.classList.contains(CaveMenuToggle.visitedSelector)) return;

            function updateSelectorAndPaginables()
            {
                {%set selectors = ['organisation', 'mapserie', 'person', 'article', 'cave', 'specie', 'map']%}
                {%for selector in selectors %}
                Grot('.{{selector}}*', dataTarget).select2paginado('{{path('cave_backend_autocomplete_'~selector)}}', { 'placeholder': '{{('select.'~selector)|trans({},'cavemessages')|raw}}' });
                {%endfor%}
                let paginables = dataTarget.querySelectorAll('.grotte-paginable');
                for(let i=0; i<paginables.length; i++){
                    Grot(paginables[i]).loader();
                }
            }

            if(dataTarget.dataset.path){
                dataTarget.innerHTML= '<div class="text-center">{{'loading'|trans({},'cavemessages')|raw}}</div>';
                Grot(dataTarget).loader({}, {'success': updateSelectorAndPaginables});
                dataTarget.dataset.loaded = "true";
            }else{
                updateSelectorAndPaginables();
            }
        }).init();
    </script>
{%endblock%}