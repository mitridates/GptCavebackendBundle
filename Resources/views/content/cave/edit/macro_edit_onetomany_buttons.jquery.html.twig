{#
/**
 * Manytoone pagination buttons
 * @file macro_edit_onetomany_buttons.html.twig
 */
#}
{% macro bttn_new(name, getFormUlr , sendFormUrl, title) %}
    <button type="button" class="btn btn-sm btn-primary" title="{{ ('new')|trans({},'cavemessages')|raw -}}" onclick="
            let modal = document.getElementById('exampleModal'), bttn = modal.querySelector('.modal-submit'), newBttn= bttn.cloneNode(true),
            submitForm= function(form, modal){

                $.ajax({type: 'POST', url: '{{ sendFormUrl }}', data: $(form).serialize(),
                        success: function(data) {
                            if(data!==''){
                            modal.querySelector('.modal-body').innerHTML= data;
                            }else{
                            bttn.parentNode.replaceChild(newBttn, bttn);
                            $(modal).modal('hide');
                            Grot(document.getElementById('grottepaginable-{{ name }}')).loader('reload');
                            }
                        }
                    });
                };

            modal.querySelector('.modal-title').innerHTML='{{ title }}';

            $.ajax({type: 'GET', url: '{{ getFormUlr }}',
                success: function(data) {
                modal.querySelector('.modal-body').innerHTML= data;
                let form = modal.getElementsByTagName('form')[0], bttn = modal.querySelector('.modal-submit');
               form.addEventListener('submit', function(event) { event.preventDefault();submitForm(form, modal)});
                bttn.addEventListener('click', function(event) {event.preventDefault();submitForm(form, modal)});
                    $(modal).on('shown.bs.modal', function (e) {
                        form.elements[0].focus();
                        let scripts = form.getElementsByTagName('script');
                        for(let i=0; i<scripts.length; i++){
                        }
                    })
                    $(modal).modal('show').modal('handleUpdate');
                }
            });
            "><i class="fa fa-plus-square"></i> {{ ('new')|trans({},'cavemessages')|raw -}}</button>{% endmacro %}


{% macro bttn_edit(name, getFormUlr, sendFormUrl, title) %}
    <button type="button" class="btn btn-sm fa fa-edit pull-right" title="{{ ('edit')|trans({},'cavemessages')|raw -}}" onclick="
            let modal = document.getElementById('exampleModal'),
            xhr = new XMLHttpRequest(),
            submitForm= function(form, modal){
                let xhr = new XMLHttpRequest(), bttn = modal.querySelector('.modal-submit'), newBttn= bttn.cloneNode(true);
                xhr.open('POST', '{{ sendFormUrl }}');
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.onload = function () {
                    if(this.responseText===''){
                        bttn.parentNode.replaceChild(newBttn, bttn);
                        $(modal).modal('hide');
                        Grot(document.getElementById('grottepaginable-{{ name }}')).loader('reload');
                    }else{
                         modal.querySelector('.modal-body').innerHTML= this.responseText;
                    }
                }
                xhr.send( new FormData(form));
            };

            modal.querySelector('.modal-title').innerHTML='{{ title }}';
            xhr.open('GET', '{{ getFormUlr }}');
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

            xhr.onload = function () {
                modal.querySelector('.modal-body').innerHTML= this.responseText;
                let form = modal.getElementsByTagName('form')[0], bttn = modal.querySelector('.modal-submit');
                form.addEventListener('submit', function(event) { event.preventDefault();submitForm(form, modal)});
                bttn.addEventListener('click', function(event) {event.preventDefault();submitForm(form, modal)});
                $(modal).on('shown.bs.modal', function (e) {
                    form.elements[0].focus();
                })
                $(modal).modal('show').modal('handleUpdate');
            }
            xhr.send();
            "></button>
{% endmacro %}

{% macro bttn_delete(name, url) %}
    <button type="button" class="btn btn-sm btn-danger fa fa-trash" title="{{ ('delete')|trans({},'cavemessages')|raw -}}" onclick="
            if(this.classList.contains('fa-trash')){
            this.classList.replace('fa-trash', 'fa-exclamation-triangle');
            let replace = ()=> this.classList.replace('fa-exclamation-triangle','fa-trash');
                setTimeout(replace, 3000);
                return false;
            }
            let xhr = new XMLHttpRequest(), parent = this.parentNode;
            xhr.open('GET', '{{ url }}');
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            xhr.onload = function () {
                if(this.responseText.length!=0){
                    alert(this.responseText);
                }else{
                    parent.parentNode.removeChild(parent);
                }
            };
            xhr.send();
            "></button>
{% endmacro %}
