{#
/**
 * @file scripts.html.twig
 * Scripts comunes
 *
 */
#}
<script>
    /**
     * Get/save modal form && remove data
     * @function
     * @param {Object} context Button
     */
    let modalFormButton = function (context) {
        let $this= context || this,
            m = document.getElementById('exampleModal'),
            modal= {
                ob      : m,
                bttn    : m.querySelector('.modal-submit'),
                title   : m.querySelector('.modal-title'),
                body    : m.querySelector('.modal-body'),
                footer  : m.querySelector('.modal-footer'),
                error   : m.querySelector('.modal-error'),
                replaceBttn: ()=> {//replace bttn to remove listeners
                    let bttn = m.querySelector('.modal-submit'), newBttn = bttn.cloneNode(true);
                    m.querySelector('.modal-footer').replaceChild(newBttn, bttn);
                }

        },
        func= {
            submitForm: function(sendFormUrl, form, name){
                $.ajax({type: 'POST', url: sendFormUrl, data: $(form).serialize(),
                    success: function(data) {
                        if(data!==''){
                            modal.error.innerHTML= data;
                        }else{
                            Grot($($this).closest('.grotte-paginable')[0]).loader('reload');
                            modal.body.innerHTML = modal.error.innerHTML ='';
                            $(modal.ob).modal('hide');
                        }
                    }
                });
            },
            getForm: function(name, getFormUlr , sendFormUrl){
                $.ajax({type: 'GET', url: getFormUlr,
                    success: function(data) {
                        $(modal.body).append(data);
                        let form = modal.body.getElementsByTagName('form')[0];
                        if(typeof form==='undefined') return;
                        form.addEventListener('submit', function(event) { event.preventDefault();func.submitForm(sendFormUrl, form, name)});
                        modal.bttn.addEventListener('click', function(event) {event.preventDefault();func.submitForm(sendFormUrl, form, name)});
                        $(modal.ob).modal('show').modal('handleUpdate');
                        $(modal.ob).on('hidden.bs.modal', function () {
                            modal.body.innerHTML = modal.error.innerHTML= '';
                            modal.replaceBttn();
                            $(modal.ob).modal('dispose');
                        })
                    }
                });
            }
        }
        ;


        let getForm= function (name, getFormUlr , sendFormUrl, title) {
            modal.title.innerHTML= title;
            func.getForm(name, getFormUlr , sendFormUrl)
        },
            removeForm= function (deleteFormUrl) {
                if($this.classList.contains('fa-trash')){
                    $this.classList.replace('fa-trash', 'fa-exclamation-triangle');
                    let replace = ()=> $this.classList.replace('fa-exclamation-triangle','fa-trash');
                    setTimeout(replace, 3000);
                    return false;
                }

                $.ajax({type: 'GET', url: deleteFormUrl,
                    success: function(data) {
                        if(data!==''){
                            alert(this.data);
                        }else {
                            Grot($($this).closest('.grotte-paginable')).loader('reload')
                        }
                    }
                });
            };

        return {
            getForm: getForm,
            removeForm: removeForm,
        }
    };
</script>