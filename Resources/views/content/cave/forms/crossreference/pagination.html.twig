{#
/**
 * Manytoone pagination
 * @file pagination.html.twig
 * @param string name Manytoone Cave{name}
 * @param string delete_token
 * @param Cave cave
 * @param array arrayParams
 * @param ArrayCollection entities
 * @param Paginator  paginator
 #}
{% import '@GptCavebackend/content/cave/edit/macro_edit_onetomany_buttons.html.twig' as bttns %}
{% for entity in entities%}
    {% set country= entity.getCountry() is not null ? {name: entity.getCountry().getName(), code: entity.getCountry().getCountryid()} : false %}
    {% set admin1= entity.getAdmin1() is not null ? {name: entity.getAdmin1().getName(), code: entity.getAdmin1().getAdmin1id()} : false %}
    {% set area= entity.getArea() is not null ? {name: entity.getArea().getName(), code: entity.getArea().getAreaid()} : false %}

<div class="border border-dark rounded">
    {{- bttns.bttn_delete( name, path('cave_backend_cave_delete_onetomany', { cave: cave.getCaveid(), sequence: entity.getSequence(), name: name, deletetoken: delete_token}))-}}

    {% if entity.getPosition() %}{{ entity.getPosition() }}.- {% endif %}{{ entity.getSerial() }}

    {{- bttns.bttn_edit(name,
        path('cave_backend_cave_create_onetomany', { cave: cave.getCaveid(), name: name, sequence: entity.getSequence()}),
        path('cave_backend_cave_save_onetomany', { cave: cave.getCaveid(), name: name, sequence: entity.getSequence()}),
        ('cave.card.'~name)|trans({},'cavepages')|raw)
    -}}
</div>
{% endfor %}